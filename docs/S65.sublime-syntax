%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: KickAss S65 (Mega65) 
file_extensions:
  - .s
scope: source.assembly.kickassembler
contexts:
  main:
    - match: \b(DMA_CopyJob|DMA_DisableTransparency|DMA_EnableTransparency|DMA_Execute|DMA_FillJob|DMA_Header|DMA_Step|Layer_AddText|Layer_AdvanceScreenPointers|Layer_ClearAllLayers|Layer_ClearLayer|Layer_SetScreenPointersXY|Layer_Update|Layer_WriteToScreen|Palette_LoadFromMem|Palette_LoadFromSD|Palette_Map|Palette_SetPalettes|SDCard_LoadToAtticRam|SDCard_LoadToChipRam|Sprite_Enable|Sprite_GetColor|Sprite_GetDimensions|Sprite_GetPointer|Sprite_GetPositionX|Sprite_GetPositionY|Sprite_SetColor|Sprite_SetDimensions|Sprite_SetPointer|Sprite_SetPositionX|Sprite_SetPositionY|Sprite_Update|System_GetRandom16|System_GetRandom8)\b
      scope: storage.type.macro
    - match: \b(Layer_GetColorAddress|Layer_GetIO|Layer_GetLayerCount|Layer_GetScreenAddress|Sprite_GetIO)\b
      scope: constant.language.pseudocommand
    - match: \b(S65_AddToMemoryReport|S65_MemoryReport|S65_RestoreBasePage|S65_RestoreRegisters|S65_SaveRegisters|S65_SetBasePage|S65_Text16|S65_Trace|Layer_DefineRRBSpriteLayer|Layer_DefineResolution|Layer_DefineScreenLayer|Layer_InitScreen|Sprite_GenerateLayerData|System_BasicUpstart65|System_BorderDebug|System_DisableC65ROM|System_Enable40Mhz|System_EnableFastRRB|System_EnableVIC4|System_WaitForRaster)\b
      scope: support.function.3d
    - match: \b(S65_COLOR_RAM|S65_ColorRamPointer|S65_LastSpriteIOPointer|S65_ReturnValue|S65_SCREEN_LOGICAL_ROW_WIDTH|S65_SCREEN_RAM|S65_SCREEN_ROW_WIDTH|S65_SCREEN_TERMINATOR_OFFSET|S65_ScreenRamPointer|S65_SpareBasePage|S65_VISIBLE_SCREEN_CHAR_HEIGHT|S65_VISIBLE_SCREEN_CHAR_WIDTH|Layer_AddrOffsets|Layer_DMAClear|Layer_DMAClearColor|Layer_DMAClearColorRRB|Layer_DynamicDataTable|Layer_IOgotoX|Layer_IOmaxCharsRRB|Layer_IOmaxSpritesRRB|Layer_IOrowCountTableRRB|Layer_IsRRBSprite|Layer_RowAddressBaseLSB|Layer_RowAddressBaseMSB|Layer_RowAddressLSB|Layer_RowAddressMSB|Layer_SpriteIOAddrLSB|Layer_SpriteIOAddrMSB|Palette_0|Palette_1|Palette_2|Palette_3|Sprite_IOcolor|Sprite_IOflags|Sprite_IOheight|Sprite_IOptr|Sprite_IOwidth|Sprite_IOx|Sprite_IOy|Sprite_SpriteIOLength)\b
      scope: constant.language.color      
    - match: '#TRUE'
      scope: constant.language.pseudocommand
    - match: '#FALSE'
      scope: constant.language.pseudocommand          
    - match: \b(REGA|REGX|REGY|REGZ)\b
      scope: constant.language.pseudocommand
    - match: \b(rmb0|adc|adcq|and|andq|asl|aslq|asr|asrq|asw|bit|bitq|clc|cld|cle|cli|clv|cmp|cmpq|cpx|cpy|cpz|dec|deq|dew|dex|dey|dez|eom|eor|eorq|inc|inq|inw|inx|iny|inz|lda|ldq|ldx|ldy|ldz|lsr|lsrq|map|neg|nop|ora|orq|pha|php|phw|phx|phy|phz|pla|plp|plx|ply|plz|rmb0|rmb1|rmb2|rmb3|rmb4|rmb5|rmb6|rmb7|rol|rolq|ror|rorq|row|sbc|sbcq|sec|sed|see|sei|smb0|smb1|smb2|smb3|smb4|smb5|smb6|smb7|sta|staq|stx|stq|sty|stz|tab|tax|txa|tay|tya|tys|taz|tza|tba|trb|tsb|tsx|tsy|txs)\b
      scope: keyword
    - match: \b(bbr0|bbr1|bbr2|bbr3|bbr4|bbr5|bbr6|bbr7|bbs0|bbs1|bbs2|bbs3|bbs4|bbs5|bbs6|bbs7|bcc|bcs|beq|bmi|bne|bpl|bra|brk|bsr|bvc|bvs|jmp|jsr|lbcc|lbcs|lbeq|lbmi|lbne|lbpl|lbra|rti|rts)\b
      scope: keyword.control
    - match: /\*
      captures:
        0: punctuation.definition.comment
      push:
        - meta_scope: comment.block
        - match: \*/\n?
          captures:
            0: punctuation.definition.comment
          pop: true
    - match: //
      captures:
        1: punctuation.definition.comment
      push:
        - meta_scope: comment.line.double-slashs
        - match: $\n?
          captures:
            1: punctuation.definition.comment
          pop: true
    - match: (?:^|\s)(\.(word|byte|text|dword))\b
      captures:
        1: storage.type.kickass
    - match: \b(CmdArgument)\b
      scope: storage.type.kickass
    - match: \b(getNamespace)\b
      scope: support.function.language
    - match: \b(toIntString|toBinaryString|toOctalString|toHexString)\b
      scope: support.function.string
    - match: \b(abs|acos|asin|atan|atan2|cbrt|ceil|cos|cosh|exp|expm1|floor|hypot|IEEEremainder|log|log10|log1p|max|min|pow|mod|random|round|signum|sin|sinh|sqrt|tan|tanh|toDegrees|toRadians)\b
      scope: support.function.math
    - match: \b(LoadBinary|LoadPicture|LoadSid|createFile)\b
      scope: support.function.file
    - match: \b(Matrix|RotationMatrix|ScaleMatrix|MoveMatrix|PerspectiveMatrix|Vector)\b
      scope: support.function.3d
    - match: (?:^|\s)(\.(var|label|const|cpu))\b
      captures:
        1: storage.type.keyword.kickass.field
    - match: (?:^|\s)(\.(struct|enum))\b
      captures:
        1: keyword.kickass.function.object
    - match: (?:^|\s)(\.(eval|fill|lohifill|print|printnow|import|align|assert|asserterror|error))\b
      captures:
        1: keyword.kickass.function
    - match: (?:^|\s)(\.(pc|importonce|pseudopc|return|eval))\b
      captures:
        1: keyword.kickass
    - match: (?:^\s*|;\s*)(\*)(?=\s*\=\s*)
      captures:
        1: keyword.kickass
    - match: (?:^|\s)(\.(encoding))\b
      scope: keyword.kickass.encoding
    - match: '(?:^\s*|;\s*)(\#(define|elif|if|undef))\s+(([A-Za-z_][A-Za-z0-9_]*)+)\b'
      captures:
        1: keyword.kickass.preprocessor
        3: constant.kickass.preprocessor
    - match: (?:^\s*|;\s*)(\#(else|endif|importonce))\b
      captures:
        1: keyword.kickass.preprocessor
    - match: (?:^\s*|;\s*)(\#(import))(?=\s+\".*\")
      captures:
        1: keyword.kickass.preprocessor
    - match: '(?:^\s*|;\s*)(\#(importif))\s+!*(([A-Za-z_][A-Za-z0-9_]*)+)(?=\s+\".*\")'
      captures:
        1: keyword.kickass.preprocessor
        3: constant.kickass.preprocessor
    - match: \b(true|false)\b
      scope: constant.language
    - match: \b(BLACK|WHITE|RED|CYAN|PURPLE|GREEN|BLUE|YELLOW|ORANGE|BROWN|LIGHT_RED|DARK_GRAY|GRAY|DARK_GREY|GREY|LIGHT_GREEN|LIGHT_BLUE|LIGHT_GRAY|LIGHT_GREY)\b
      scope: constant.language.color
    - match: \b(LDA_IMM|LDA_ZP|LDA_ZPX|LDX_ZPY|LDA_IZPX|LDA_IZPY|LDA_ABS|LDA_ABSX|LDA_ABSY|JMP_IND|BNE_REL|RTS)\b
      scope: constant.language.opcodes
    - match: \b(BF_C64FILE|BF_BITMAP_SINGLECOLOR|BF_KOALA|BF_FLI)\b
      scope: constant.language.file
    - match: \b(AT_ABSOLUTE|AT_ABSOLUTEX|AT_ABSOLUTEY|AT_IMMEDIATE|AT_INDIRECT|AT_IZEROPAGEX|AT_IZEROPAGEY|AT_NONE|AT_IZEROPAGEZ|AT_INDIRECTX)\b
      scope: constant.language.pseudocommand
    - match: \b(PI|E)\b
      scope: constant.language.math
    - match: \b(Hashtable)\b
      scope: storage.type.hashtable
    - match: \b(list|List)\(\s*(\$?\d+)*\s*\)
      scope: list
      captures:
        1: storage.type.list
        2: variable.parameter
    - match: (?:^|\s)(\.for)\s*\((var)\b
      captures:
        1: keyword.control.for
        2: storage.type.for
    - match: (?:^|\s)((\.if)\b|(else)\b)
      captures:
        1: keyword.control.if
    - match: (?:^|\s)(\.while)(?=\s*\(.*\))
      captures:
        1: keyword.control.while
    - match: '"'
      push:
        - meta_scope: string.quoted.double.untitled
        - match: '"'
          pop: true
        - match: \\.
          scope: constant.character.escape
    - match: '(?:^\s*|;\s*)((\.filenamespace)\s*([A-Za-z_][A-Za-z0-9_]*))\b'
      captures:
        1: meta.filenamespace.identifier
        2: keyword.type.filenamespace
        3: entity.name.filenamespace
    - match: '(?:^\s*|;\s*)((\.namespace)\s*([A-Za-z_][A-Za-z0-9_]*))\b'
      captures:
        1: meta.namespace.identifier
        2: keyword.type.namespace
        3: entity.name.namespace
    - match: '(?:^\s*|;\s*)(((!)|(!?(\@*[A-Za-z_][A-Za-z0-9_]*)+))\:)'
      scope: label
      captures:
        1: meta.label.identifier
        2: entity.name.label
    - match: '(?:^\s*|;\s*)((\.pseudocommand)\s*(\@*[A-Za-z_][A-Za-z0-9_]*))\b'
      captures:
        1: meta.pseudocommand.identifier
        2: storage.type.pseudocommand
        3: entity.name.pseudocommand
    - match: '(?:|,^\s*|;\s*)((\.function)\s*(\@*[A-Za-z0-9_]*))\b'
      captures:
        1: meta.label.identifier
        2: storage.type.function
        3: entity.name.function
    - match: '(?:^\s*|;\s*)((\.macro)\s*(\@*[A-Za-z_][A-Za-z0-9_]*))\b'
      captures:
        1: meta.macro.identifier
        2: storage.type.macro
        3: entity.name.macro
    - match: '\$\h+'
      scope: constant.numeric.hex
    - match: '\b\d+'
      scope: constant.numeric.decimal
    - match: '\%[0-1]+'
      scope: constant.numeric.binary     
